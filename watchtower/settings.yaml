---
default:
  MAINTENANCE_MODE: null
  ALLOWED_HOSTS: []
  AUTH_PASSWORD_VALIDATORS:
  - NAME: django.contrib.auth.password_validation.UserAttributeSimilarityValidator
  - NAME: django.contrib.auth.password_validation.MinimumLengthValidator
  - NAME: django.contrib.auth.password_validation.CommonPasswordValidator
  - NAME: django.contrib.auth.password_validation.NumericPasswordValidator
  DEBUG: false
  INSTALLED_APPS:
  - django.contrib.admin
  - django.contrib.auth
  - django.contrib.contenttypes
  - django.contrib.sessions
  - django.contrib.messages
  - django.contrib.staticfiles
  - maintenance_mode
  - wachturm
  - django_otp
  - django_otp.plugins.otp_static
  - django_otp.plugins.otp_totp
  - two_factor
  - otp_yubikey
  LANGUAGE_CODE: en-us
  LOAD_DOTENV: true
  MIDDLEWARE:
  - django.middleware.security.SecurityMiddleware
  - django.contrib.sessions.middleware.SessionMiddleware
  - django.middleware.common.CommonMiddleware
  - django.middleware.csrf.CsrfViewMiddleware
  - django.contrib.auth.middleware.AuthenticationMiddleware
  - django_otp.middleware.OTPMiddleware #Must come after 'django.contrib.auth.middleware.AuthenticationMiddleware',
  - django.contrib.messages.middleware.MessageMiddleware
  - django.middleware.clickjacking.XFrameOptionsMiddleware
  - maintenance_mode.middleware.MaintenanceModeMiddleware
  TEMPLATES:
  - APP_DIRS: true
    BACKEND: django.template.backends.django.DjangoTemplates
    DIRS: []
    OPTIONS:
      context_processors:
      - django.template.context_processors.debug
      - django.template.context_processors.request
      - django.contrib.auth.context_processors.auth
      - django.contrib.messages.context_processors.messages
      - maintenance_mode.context_processors.maintenance_mode
  TIME_ZONE: UTC
  USE_I18N: true
  USE_L10N: true
  USE_TZ: true
  LOGGING_CONFIG: null
  LOGGING:
    disable_existing_loggers: false
    formatters:
      console:
        format: "%(asctime)s %(name)s %(levelname)s %(lineno)d %(funcName)s : %(message)s"
      django:
        (): django.utils.log.ServerFormatter
        format: "[{server_time}] {message}"
        style: "{"
    handlers:
      console:
        class: logging.StreamHandler
        formatter: console
      django:
        class: logging.StreamHandler
        formatter: django
    loggers:
      '':
        level: INFO
        handlers:
        - console
      watchtower:
        level: INFO
        handlers:
        - console
        propagate: false
      django:
        level: INFO
        handlers:
        - django
        propagate: false
      rest:
        level: INFO
        handlers:
        - console
        propagate: false
    version: 1
development:
  ALLOWED_HOSTS:
  - '*'
  DEBUG: true
  INSTALLED_APPS:
    - django.contrib.admin
    - django.contrib.auth
    - django.contrib.contenttypes
    - django.contrib.sessions
    - django.contrib.messages
    - django.contrib.staticfiles
    - django_extensions
    - django_otp
    - django_otp.plugins.otp_static
    - django_otp.plugins.otp_totp
    - two_factor
    - otp_yubikey
    - wachturm
    - maintenance_mode
  LOGGING:
    dynaconf_merge: true
    handlers:
      console:
        class: logging.StreamHandler
        formatter: console
      django:
        class: logging.StreamHandler
        formatter: django
    loggers:
      '':
        level: INFO
        handlers:
        - console
      watchtower:
        level: DEBUG
        handlers:
        - console
        propagate: false # required to avoid double logging with root logger
      rest:
        level: INFO
        handlers:
        - console
        propagate: false # required to avoid double logging with root logger
      django:
        handlers:
        - django
        level: INFO
        propagate: false
  DATABASES:
    default:
      ENGINE: django.db.backends.sqlite3
      NAME: db/dev.sqlite3
testing:
  DEBUG: true
  ALLOWED_HOSTS:
  - '*'
  DATABASES:
    default:
      ENGINE: django.db.backends.sqlite3
      NAME: watchtower/db/testing.sqlite3
maintenance:
  #Maintenances Mode
  # If True the maintenance-mode will be activated
  MAINTENANCE_MODE: true
staging:
  INSTALLED_APPS:
  - django.contrib.admin
  - django.contrib.auth
  - django.contrib.contenttypes
  - django.contrib.sessions
  - django.contrib.messages
  - django.contrib.staticfiles
  - django_otp
  - django_otp.plugins.otp_static
  - django_otp.plugins.otp_totp
  - two_factor
  - otp_yubikey
  - wachturm
  - maintenance_mode
  ALLOWED_HOSTS:
  - staging.watchtower.com
production:
  INSTALLED_APPS:
  - django.contrib.admin
  - django.contrib.auth
  - django.contrib.contenttypes
  - django.contrib.sessions
  - django.contrib.messages
  - django.contrib.staticfiles
  - django_otp
  - django_otp.plugins.otp_static
  - django_otp.plugins.otp_totp
  - two_factor
  - otp_yubikey
  - wachturm
  - maintenance_mode
  ALLOWED_HOSTS:
  - watchtower.com
#  DATABASES:
#    default:
#      ENGINE: django.contrib.gis.db.backends.postgis
#      NAME: wachturm
#      USER: wachturm
#      PASSWORD: ??????? in .secret.yaml
#      HOST: localhost
#      PORT: 5432
  LOGGING:
    dynaconf_merge: true
    handlers:
      console:
        level: WARNING
        class: logging.StreamHandler
        formatter: console
      django:
        level: WARNING
        class: logging.StreamHandler
        formatter: django
    loggers:
      '':
        level: WARNING
        handlers:
          - console
      rest:
        level: WARNING
        handlers:
          - django
        propagate: false
      django:
        handlers:
          - django
        level: WARNING
        propagate: false